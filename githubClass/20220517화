터미널 명령어  
1. touch : 파일을 생성한다. 숨김 파일을 만들기 위해서 .을 파일 명 앞에 붙입니다.
2. mkdir : make directory 새 폴더를 생성하는 명령어
3. ls : list segments 현재 작업 중인 디렉토리의 폴더/파일 목록을 보여준다.
3-1 ls -a : all의 옵션, 숨김 파일까지 모두 보여줍니다.
3-2 ls -l : iong 옵션 용량, 수정 날씨 등 파일 정보를 자세하게 보여줍니다.
4. mv : move 폴더/파일을 다른 폴더 내로 이동하거나 이름을 변경하는 명령어
5. cd : change directory 현재 작업중인 디렉토리를 변경하는 명령어
5-1 cd ~ : 홈 디렉토리로 이동 cd .. : 부모 디렉토리로 이동 
    cd - : 바로 전 디렉토리로 이동
6. rm : 폴더/파일 지우는 명령어
7. open : 폴더/파일을 여는 명령어

마크다운 문법
1. 제목 : '#'으로 6단계까지 사용 가능하다.
2. 목록 :  - * * 사용
3. 강조 : 기울임 *글자* 혹은 _글자_ , 굵게 **글자** 혹은 __글자__ , 
         취소 ~~글자~~
4. 코드 : 인라인코드 ''로 감싼다. 블록코드 '''python 백틱 3개 이후 코드의 종류 작성
5,6 링크 이미지 : 뒤에 툴 사용하자
7. 인용 : >을 사용하고 4단게로 되어있다.
8. 표 : 이것도 그냥 툴
9. 수평선 : --- , *** , ___

Git 기초
0. 초기 설정 : 누가 커밋을 남겼는지 확인 가능하도록 이름과 이메일을 설정한다.
    $ git config --global user.name "이름"
    $ git config --global user.email "메일 주소"
1. git init : 현재 작업 중인 디렉토리를 Git으로 관리하겠다는 명령어
   주의사항 : 이미 터미널에 master가 있다면 절대 git init을 치면 안된다.
            즉 중복 금지
            절대로 홈 디렉토리에서 git init을 하지 않습니다. 
2. git status : Working Directory와 Staging Area에 있는 파일의 현재 상태를 알려주는 명령어
3. git add : Working Directory에 있는 파일을 Staging Area로 올리는 명령어
4. git commit : Staging Area에 올라온 파일의 변경 사항을 하나의 버전(커밋)으로 저장하는 명령어
5. git log : 커밋의 내역(ID, 작성자, 시간, 메세지 등)을 조회할 수 있는 명령어
5-1 --oneline : 한줄로 축약해서 보여줍니다. --graph : 브랜치와 머지 내역을 그래프로 보여준다.
    --all : 현재 브랜치를 포함한 모든 브랜치의 내역을 보여줍니다.

Github
1. git remote : 로컬 저장소에 원격 저장소를 등록, 조회, 삭제할 수 있는 명령어
            git remote add <이름> <주소> 형식으로 작성합니다.
2. git remote -v : 조회 add를 이용해 추가했던 원격 저장소의 이름과 주소가 출력됩니다.
3. git remote rm <이름> : 삭제
4. git push : 로컬 저장소의 커밋을 원격 저장소에 업로드하는 명령어
              git push <저장소 이름> <브랜치 이름> 형식으로 쓰인다.